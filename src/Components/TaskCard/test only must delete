// import axios from 'axios';
// import React, { useEffect, useState } from 'react';
// import { FaPen, FaTrash } from 'react-icons/fa';
// import Modal from './../Modal/Modal';

// const LOCAL_STORAGE_KEY = 'task_users';

// const TaskCard = () => {
//     const [users, setUsers] = useState([]);
//     const [loading, setLoading] = useState(true);
//     const [error, setError] = useState(null);
//     const [isOpenModel, setIsOpenModel] = useState(false);

//     useEffect(() => {
//         const savedUsers = localStorage.getItem(LOCAL_STORAGE_KEY);
//         if (savedUsers) {
//             setUsers(JSON.parse(savedUsers));
//             setLoading(false);
//         } else {
//             const fetchData = async () => {
//                 try {
//                     const response = await axios.get(
//                         'https://raw.githubusercontent.com/asmaaelnaggar/Drag_Drop_html_css_js/refs/heads/main/ourjsonapi.json'
//                     );
//                     setUsers(response.data.users);
//                     localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(response.data.users));
//                     setLoading(false);
//                 } catch (err) {
//                     setError(err.message);
//                     setLoading(false);
//                 }
//             };
//             fetchData();
//         }
//     }, []);

//     const updateUsers = (updatedUsers) => {
//         setUsers(updatedUsers);
//         localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(updatedUsers));
//     };

//     const handleDelete = (userId, todoIndex) => {
//         const updated = users.map((user) =>
//             user.id === userId
//                 ? { ...user, todos: user.todos.filter((_, index) => index !== todoIndex) }
//                 : user
//         );
//         updateUsers(updated);
//     };

//     const handleEdit = (userId, todoIndex) => {
//         const updatedUsers = [...users];
//         const user = updatedUsers.find((u) => u.id === userId);
//         const todo = user.todos[todoIndex];

//         const newTitle = prompt('Edit title:', todo.title);
//         const newDescription = prompt('Edit description:', todo.description);
//         const newPriority = prompt('Edit priority:', todo.priority);
//         const newStart = prompt('Edit start date:', todo.start);

//         if (newTitle && newDescription && newPriority && newStart) {
//             user.todos[todoIndex] = {
//                 ...todo,
//                 title: newTitle,
//                 description: newDescription,
//                 priority: newPriority,
//                 start: newStart,
//             };
//             updateUsers(updatedUsers);
//         }
//     };

//     const [activeCard, setActiveCard] = useState(null);
//     // Drag and Drop handlers
//     const handleDragStart = (userId, todoIndex, priority) => {
//         setActiveCard({ userId, todoIndex, priority });
//     };

//     const handleDragOver = (e) => {
//         e.preventDefault();
//     };

//     const handleDrop = (newPriority) => {
//         if (!activeCard) return;

//         const { userId, todoIndex } = activeCard;
//         const updatedUsers = [...users];
//         const user = updatedUsers.find((u) => u.id === userId);

//         if (user && user.todos[todoIndex]) {
//             user.todos[todoIndex].priority = newPriority;
//             updateUsers(updatedUsers);
//         }

//         setActiveCard(null);
//     };

//     if (loading) return <div className="loading">Loading data...</div>;
//     if (error) return <div className="error">Error: {error}</div>;

//     const renderTasks = (statusPriority) => {
//         return users.map(user =>
//             user.todos.filter(todo => todo.priority === statusPriority).map((todo, index) => (
//                 <div
//                     key={`${user.id}-${index}`}
//                     className="bg-white p-4 rounded shadow mb-4"
//                     draggable
//                     onDragStart={() => handleDragStart(user.id, index, todo.priority)}
//                 >
//                     <div className="flex flex-col gap-2">
//                         <div className={`${todo.priority === 'high' ? 'bg-red-500' : todo.priority === 'Medium' ? 'bg-yellow-500' : 'bg-blue-500'} text-white w-fit rounded px-2 py-1 text-xs font-medium`}>
//                             {todo.priority}
//                         </div>
//                         <h3 className="text-gray-900 text-sm font-medium">{todo.title}</h3>
//                         <p className="text-gray-600 text-xs">{todo.description}</p>
//                         <div className="border rounded px-2 py-1 text-xs">{todo.start}</div>
//                         <div className="border rounded px-2 py-1 text-xs">{todo.end}</div>
//                         <div className="border rounded px-2 py-1 text-xs">{todo.attachments}</div>
//                     </div>
//                     <div className="flex justify-end gap-3 mt-2">
//                         <FaPen className="text-gray-800 cursor-pointer" onClick={() => handleEdit(user.id, index)} />
//                         <FaTrash className="text-gray-800 cursor-pointer" onClick={() => handleDelete(user.id, index)} />
//                     </div>
//                 </div>
//             ))
//         );
//     };

//     return (
//         <div className="grid grid-cols-1 md:grid-cols-3 gap-4 w-full h-screen p-6">
//             {/* Todo Column */}
//             <div className="bg-gray-800 h-20 text-white flex justify-between pl-10 pr-10 items-center text-2xl font-bold rounded-2xl">
//                 <p>Todo</p>
//                 <button value={isOpenModel} onClick={() => setIsOpenModel((show) => !show)} className='cursor-pointer'>
//                     <img src="/src/assets/icons/plus2.svg" alt="Add" />
//                 </button>
//             </div>

//             {/* In Progress Column */}
//             <div className="bg-gray-800 h-20 text-white flex justify-center items-center text-2xl font-bold rounded-xl">
//                 In Progress
//             </div>

//             {/* Done Column */}
//             <div className="bg-gray-800 h-20 text-white flex justify-center items-center text-2xl font-bold rounded-xl">
//                 Done
//             </div>

//             {/* Task Columns with Drop Zones */}
//             <div
//                 className="bg-white/60 backdrop-blur px-4 py-4 overflow-y-auto rounded-2xl row-span-1 shadow-inner space-y-4"
//                 onDragOver={handleDragOver}
//                 onDrop={() => handleDrop("Low")}
//             >
//                 {renderTasks("Low")}
//             </div>

//             <div
//                 className="bg-white/60 backdrop-blur px-4 py-4 overflow-y-auto rounded-2xl row-span-1 shadow-inner space-y-4"
//                 onDragOver={handleDragOver}
//                 onDrop={() => handleDrop("Medium")}
//             >
//                 {renderTasks("Medium")}
//             </div>

//             <div
//                 className="bg-white/60 backdrop-blur px-4 py-4 overflow-y-auto rounded-2xl row-span-1 shadow-inner space-y-4"
//                 onDragOver={handleDragOver}
//                 onDrop={() => handleDrop("high")}
//             >
//                 {renderTasks("high")}
//             </div>

//             {isOpenModel && <Modal setIsOpenModel={setIsOpenModel} />}
//         </div>
//     );
// };

// export default TaskCard;
import axios from 'axios';
import React, { useEffect, useState } from 'react';
import { FaPen, FaTrash } from 'react-icons/fa';
import Modal from './../Modal/Modal';

const LOCAL_STORAGE_KEY = 'task_users';

const TaskCard = () => {
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isOpenModel, setIsOpenModel] = useState(false);

    // Define columns with their corresponding priorities
    const columns = [
        { id: 'todo', title: 'Todo', priority: 'Low' },
        { id: 'inProgress', title: 'In Progress', priority: 'Medium' },
        { id: 'done', title: 'Done', priority: 'High' }
    ];

    useEffect(() => {
        const savedUsers = localStorage.getItem(LOCAL_STORAGE_KEY);
        if (savedUsers) {
            setUsers(JSON.parse(savedUsers));
            setLoading(false);
        } else {
            const fetchData = async () => {
                try {
                    const response = await axios.get(
                        'https://raw.githubusercontent.com/asmaaelnaggar/Drag_Drop_html_css_js/refs/heads/main/ourjsonapi.json'
                    );
                    setUsers(response.data.users);
                    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(response.data.users));
                    setLoading(false);
                } catch (err) {
                    setError(err.message);
                    setLoading(false);
                }
            };
            fetchData();
        }
    }, []);

    const updateUsers = (updatedUsers) => {
        setUsers(updatedUsers);
        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(updatedUsers));
    };

    const handleDelete = (userId, todoIndex) => {
        const updated = users.map((user) =>
            user.id === userId
                ? { ...user, todos: user.todos.filter((_, index) => index !== todoIndex) }
                : user
        );
        updateUsers(updated);
    };

    const handleEdit = (userId, todoIndex) => {
        const updatedUsers = [...users];
        const user = updatedUsers.find((u) => u.id === userId);
        const todo = user.todos[todoIndex];

        const newTitle = prompt('Edit title:', todo.title);
        const newDescription = prompt('Edit description:', todo.description);
        const newPriority = prompt('Edit priority (Low/Medium/High):', todo.priority);
        const newStart = prompt('Edit start date:', todo.start);

        if (newTitle && newDescription && newPriority && newStart) {
            user.todos[todoIndex] = {
                ...todo,
                title: newTitle,
                description: newDescription,
                priority: newPriority,
                start: newStart,
            };
            updateUsers(updatedUsers);
        }
    };

    const [draggedItem, setDraggedItem] = useState(null);
    // Drag and Drop handlers
    const handleDragStart = (userId, todoIndex, currentPriority) => {
        setDraggedItem({ userId, todoIndex, currentPriority });
    };

    const handleDragOver = (e) => {
        e.preventDefault();
    };

    const handleDrop = (targetPriority) => {
        if (!draggedItem) return;

        const { userId, todoIndex } = draggedItem;
        const updatedUsers = [...users];
        const user = updatedUsers.find((u) => u.id === userId);

        if (user && user.todos[todoIndex]) {
            // Update the priority of the dragged item
            user.todos[todoIndex].priority = targetPriority;
            updateUsers(updatedUsers);
        }

        setDraggedItem(null);
    };

    if (loading) return <div className="loading">Loading data...</div>;
    if (error) return <div className="error">Error: {error}</div>;

    const getPriorityColor = (priority) => {
        switch (priority) {
            case 'High': return 'bg-red-500';
            case 'Medium': return 'bg-yellow-500';
            case 'Low': return 'bg-blue-500';
            default: return 'bg-gray-500';
        }
    };

    const renderTasks = (priority) => {
        return users.map(user =>
            user.todos
                .filter(todo => todo.priority === priority)
                .map((todo, index) => (
                    <div
                        key={`${user.id}-${index}`}
                        className="bg-white p-4 rounded shadow mb-4 cursor-move"
                        draggable
                        onDragStart={() => handleDragStart(user.id, index, todo.priority)}
                    >
                        <div className="flex flex-col gap-2">
                            <div className={`${getPriorityColor(todo.priority)} text-white w-fit rounded px-2 py-1 text-xs font-medium`}>
                                {todo.priority}
                            </div>
                            <h3 className="text-gray-900 text-sm font-medium">{todo.title}</h3>
                            <p className="text-gray-600 text-xs">{todo.description}</p>
                            <div className="border rounded px-2 py-1 text-xs">{todo.start}</div>
                            <div className="border rounded px-2 py-1 text-xs">{todo.end}</div>
                            <div className="border rounded px-2 py-1 text-xs">{todo.attachments}</div>
                        </div>
                        <div className="flex justify-end gap-3 mt-2">
                            <FaPen
                                className="text-gray-800 cursor-pointer hover:text-blue-500"
                                onClick={() => handleEdit(user.id, index)}
                            />
                            <FaTrash
                                className="text-gray-800 cursor-pointer hover:text-red-500"
                                onClick={() => handleDelete(user.id, index)}
                            />
                        </div>
                    </div>
                ))
        );
    };

    return (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 w-full min-h-screen p-6">
            {columns.map((column) => (
                <div key={column.id} className="flex flex-col">
                    {/* Column Header */}
                    <div
                        className="bg-gray-800 h-20 text-white flex justify-between items-center text-2xl font-bold rounded-xl p-4"
                    >
                        <span>{column.title}</span>
                        {column.id === 'todo' && (
                            <button
                                onClick={() => setIsOpenModel(true)}
                                className="cursor-pointer"
                            >
                                <img src="/src/assets/icons/plus2.svg" alt="Add Task" />
                            </button>
                        )}
                    </div>

                    {/* Task List */}
                    <div
                        className={`bg-white/60 backdrop-blur px-4 py-4 overflow-y-auto rounded-b-xl shadow-inner space-y-4 flex-1`}
                        onDragOver={handleDragOver}
                        onDrop={() => handleDrop(column.priority)}
                    >
                        {renderTasks(column.priority)}
                    </div>
                </div>
            ))}

            {isOpenModel && <Modal setIsOpenModel={setIsOpenModel} />}
        </div>
    );
};

export default TaskCard;
import axios from 'axios';
import React, { useEffect, useState } from 'react';
import { FaPen, FaTrash } from 'react-icons/fa';
import Modal from './../Modal/Modal';

const LOCAL_STORAGE_KEY = 'task_users';

const TaskCard = () => {
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isOpenModel, setIsOpenModel] = useState(false);

    useEffect(() => {
        const savedUsers = localStorage.getItem(LOCAL_STORAGE_KEY);
        if (savedUsers) {
            setUsers(JSON.parse(savedUsers));
            setLoading(false);
        } else {
            const fetchData = async () => {
                try {
                    const response = await axios.get(
                        'https://raw.githubusercontent.com/asmaaelnaggar/Drag_Drop_html_css_js/refs/heads/main/ourjsonapi.json'
                    );
                    setUsers(response.data.users);
                    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(response.data.users));
                    setLoading(false);
                } catch (err) {
                    setError(err.message);
                    setLoading(false);
                }
            };
            fetchData();
        }
    }, []);

    const updateUsers = (updatedUsers) => {
        setUsers(updatedUsers);
        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(updatedUsers));
    };

    const handleDelete = (userId, todoIndex) => {
        const updated = users.map((user) =>
            user.id === userId
                ? { ...user, todos: user.todos.filter((_, index) => index !== todoIndex) }
                : user
        );
        updateUsers(updated);
    };

    const handleEdit = (userId, todoIndex) => {
        const updatedUsers = [...users];
        const user = updatedUsers.find((u) => u.id === userId);
        const todo = user.todos[todoIndex];

        const newTitle = prompt('Edit title:', todo.title);
        const newDescription = prompt('Edit description:', todo.description);
        const newPriority = prompt('Edit priority:', todo.priority);
        const newStart = prompt('Edit start date:', todo.start);

        if (newTitle && newDescription && newPriority && newStart) {
            user.todos[todoIndex] = {
                ...todo,
                title: newTitle,
                description: newDescription,
                priority: newPriority,
                start: newStart,
            };
            updateUsers(updatedUsers);
        }
    };

    if (loading) return <div className="loading">Loading data...</div>;
    if (error) return <div className="error">Error: {error}</div>;


    const renderTasks = (statusPriority) => {
        return users.map(user =>
            user.todos.filter(todo => todo.priority === statusPriority).map((todo, index) => (
                <div key={`${user.id}-${index}`} className="bg-white p-4 rounded shadow mb-4">
                    <div className="flex flex-col gap-2 cursor-grab hover" draggable >
                        <div className="bg-blue-500 text-white w-fit rounded px-2 py-1 text-xs font-medium">{todo.priority}</div>
                        <h3 className="text-gray-900 text-sm font-medium">{todo.title}</h3>
                        <p className="text-gray-600 text-xs">{todo.description}</p>
                        <div className="border rounded px-2 py-1 text-xs">{todo.start}</div>
                        <div className="border rounded px-2 py-1 text-xs">{todo.end}</div>
                        <div className="border rounded px-2 py-1 text-xs">{todo.attachments}</div>
                    </div>
                    <div className="flex justify-end gap-3 mt-2">
                        <FaPen className="text-gray-800 cursor-pointer" onClick={() => handleEdit(user.id, index)} />
                        <FaTrash className="text-gray-800 cursor-pointer" onClick={() => handleDelete(user.id, index)} />
                    </div>
                </div>
            ))
        );
    };

    return (
        <div className="grid grid-cols-3 gap-4 w-full h-screen p-6">
            <div className=" bg-gray-800 h-20 text-white flex 
      justify-between pl-10 pr-10 items-center text-2xl font-bold rounded-2xl"><p>Todo</p>
                <button value={isOpenModel} onClick={() => setIsOpenModel((show) => !show)} className='cursor-pointer'>
                    <img src="/src/assets/icons/plus2.svg" /></button> </div>
            <div className="bg-gray-800 h-20 text-white flex 
      justify-center items-center text-2xl font-bold rounded-xl">In Progress</div>
            <div className="bg-gray-800 h-20 text-white flex 
      justify-center items-center text-2xl font-bold rounded-xl">Done</div>

            <div className="bg-white/60 backdrop-blur px-4 py-4 overflow-y-auto rounded-2xl row-span-1 shadow-inner space-y-4" >{renderTasks("Low")}</div>
            <div className="bg-white/60 backdrop-blur px-4 py-4 overflow-y-auto rounded-2xl row-span-1 shadow-inner space-y-4" >{renderTasks("Medium")}</div>
            <div className="bg-white/60 backdrop-blur px-4 py-4 overflow-y-auto rounded-2xl row-span-1 shadow-inner space-y-4" >{renderTasks("high")}</div>
            {isOpenModel && <Modal setIsOpenModel={setIsOpenModel} />}
        </div>
    );
};

export default TaskCard;

import axios from 'axios';
import React, { useEffect, useState } from 'react';
import { FaPen, FaTrash } from 'react-icons/fa';
import Modal from './../Modal/Modal';


const LOCAL_STORAGE_KEY = 'task_users';

const TaskCard = () => {
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isOpenModel, setIsOpenModel] = useState(false);
    const [draggedItem, setDraggedItem] = useState(null);

    const columns = [
        { id: 'todo', title: 'Todo', priority: 'Low' },
        { id: 'inProgress', title: 'In Progress', priority: 'Medium' },
        { id: 'done', title: 'Done', priority: 'High' },
    ];

    useEffect(() => {
        const savedUsers = localStorage.getItem(LOCAL_STORAGE_KEY);
        if (savedUsers) {
            setUsers(JSON.parse(savedUsers));
            setLoading(false);
        } else {
            const fetchData = async () => {
                try {
                    const response = await axios.get(
                        'https://raw.githubusercontent.com/asmaaelnaggar/Drag_Drop_html_css_js/refs/heads/main/ourjsonapi.json'
                    );
                    const usersWithIds = response.data.users.map(user => ({
                        ...user,
                        todos: user.todos.map((todo, idx) => ({
                            ...todo,
                            id: `${user.id}-${idx}`, // Generate a unique ID
                        })),
                    }));
                    setUsers(usersWithIds);
                    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(usersWithIds));
                    setLoading(false);
                } catch (err) {
                    setError(err.message);
                    setLoading(false);
                }
            };
            fetchData();
        }
    }, []);

    const updateUsers = (updatedUsers) => {
        setUsers(updatedUsers);
        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(updatedUsers));
    };

    const handleDelete = (userId, todoId) => {
        const updated = users.map((user) =>
            user.id === userId
                ? { ...user, todos: user.todos.filter((todo) => todo.id !== todoId) }
                : user
        );
        updateUsers(updated);
    };

    const handleEdit = (userId, todoId) => {
        const updatedUsers = [...users];
        const user = updatedUsers.find((u) => u.id === userId);
        const todoIndex = user.todos.findIndex((t) => t.id === todoId);
        const todo = user.todos[todoIndex];

        const newTitle = prompt('Edit title:', todo.title);
        const newDescription = prompt('Edit description:', todo.description);
        const newPriority = prompt('Edit priority (Low/Medium/High):', todo.priority);
        const newStart = prompt('Edit start date:', todo.start);

        if ([newTitle, newDescription, newPriority, newStart].some(v => v === null)) return;
        if (!['Low', 'Medium', 'High'].includes(newPriority)) {
            alert('Priority must be Low, Medium, or High.');
            return;
        }

        user.todos[todoIndex] = {
            ...todo,
            title: newTitle,
            description: newDescription,
            priority: newPriority,
            start: newStart,
        };
        updateUsers(updatedUsers);
    };

    const handleDragStart = (userId, todoId, currentPriority) => {
        setDraggedItem({ userId, todoId, currentPriority });
    };

    const handleDragOver = (e) => {
        e.preventDefault();
    };

    const handleDrop = (targetPriority) => {
        if (!draggedItem) return;

        const { userId, todoId } = draggedItem;
        const updatedUsers = [...users];
        const user = updatedUsers.find((u) => u.id === userId);
        const todoIndex = user.todos.findIndex((t) => t.id === todoId);

        if (user && user.todos[todoIndex] && user.todos[todoIndex].priority !== targetPriority) {
            user.todos[todoIndex].priority = targetPriority;
            updateUsers(updatedUsers);
        }

        setDraggedItem(null);
    };

    const getPriorityColor = (priority) => {
        switch (priority) {
            case 'High':
                return 'bg-red-500';
            case 'Medium':
                return 'bg-yellow-500';
            case 'Low':
                return 'bg-blue-500';
            default:
                return 'bg-gray-500';
        }
    };

    const renderTasks = (priority) => {
        return users.map((user) =>
            user.todos
                .filter((todo) => todo.priority === priority)
                .map((todo) => (
                    <div
                        key={todo.id}
                        className="bg-white p-4 rounded shadow mb-4 cursor-move"
                        draggable
                        onDragStart={() => handleDragStart(user.id, todo.id, todo.priority)}
                    >
                        <div className="flex flex-col gap-2">
                            <div
                                className={`${getPriorityColor(todo.priority)} text-white w-fit rounded px-2 py-1 text-xs font-medium`}
                            >
                                {todo.priority}
                            </div>
                            <h3 className="text-gray-900 text-sm font-medium">{todo.title}</h3>
                            <p className="text-gray-600 text-xs">{todo.description}</p>
                            <div className="border rounded px-2 py-1 text-xs">{todo.start || 'No start date'}</div>
                            <div className="border rounded px-2 py-1 text-xs">{todo.end || 'No end date'}</div>
                            <div className="border rounded px-2 py-1 text-xs">{todo.attachments || 'No attachments'}</div>
                        </div>
                        <div className="flex justify-end gap-3 mt-2">
                            <FaPen
                                className="text-gray-800 cursor-pointer hover:text-blue-500"
                                onClick={() => handleEdit(user.id, todo.id)}
                            />
                            <FaTrash
                                className="text-gray-800 cursor-pointer hover:text-red-500"
                                onClick={() => handleDelete(user.id, todo.id)}
                            />
                        </div>
                    </div>
                ))
        );
    };

    if (loading) return <div className="loading">Loading data...</div>;
    if (error) return <div className="error">Error: {error}</div>;

    return (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 w-full min-h-screen p-6">
            {columns.map((column) => (
                <div key={column.id} className="flex flex-col">
                    <div className="bg-gray-800 h-20 text-white flex justify-between items-center text-2xl font-bold rounded-xl p-4">
                        <span>{column.title}</span>
                        {column.id === 'todo' && (
                            <button onClick={() => setIsOpenModel(true)} className="cursor-pointer">
                                <img src='/src/assets/icons/plus2.svg' alt="Add Task" />
                            </button>
                        )}
                    </div>

                    <div
                        className="bg-white/60 backdrop-blur px-4 py-4 overflow-y-auto rounded-b-xl shadow-inner space-y-4 flex-1"
                        onDragOver={handleDragOver}
                        onDrop={() => handleDrop(column.priority)}
                    >
                        {renderTasks(column.priority)}
                    </div>
                </div>
            ))}

            {isOpenModel && <Modal setIsOpenModel={setIsOpenModel} />}
        </div>
    );
};

export default TaskCard;

import axios from 'axios';
import React, { useContext, useEffect, useState } from 'react';
import { FaPen, FaTrash } from 'react-icons/fa';
import Modal from './../Modal/Modal';
import { ThemeContext } from '../../Context/ThemeContext';

const LOCAL_STORAGE_KEY = 'task_users';

const TaskCard = () => {
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [isOpenModel, setIsOpenModel] = useState(false);
    const [draggedItem, setDraggedItem] = useState(null);
    const [search, setSearch] = useState("");
    const { theme } = useContext(ThemeContext);

    const columns = [
        { id: 'todo', title: 'Low', priority: 'Low' },
        { id: 'inProgress', title: 'Medium', priority: 'Medium' },
        { id: 'done', title: 'High', priority: 'High' },
    ];

    useEffect(() => {
        const savedUsers = localStorage.getItem(LOCAL_STORAGE_KEY);
        if (savedUsers) {
            setUsers(JSON.parse(savedUsers));
            setLoading(false);
        } else {
            const fetchData = async () => {
                try {
                    const response = await axios.get(
                        'https://raw.githubusercontent.com/asmaaelnaggar/Drag_Drop_html_css_js/refs/heads/main/ourjsonapi.json'
                    );
                    const usersWithIds = response.data.users.map(user => ({
                        ...user,
                        todos: user.todos.map((todo, idx) => ({
                            ...todo,
                            id: `${user.id}-${idx}`,
                            status: false, // Add status per task
                        })),
                    }));
                    setUsers(usersWithIds);
                    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(usersWithIds));
                    setLoading(false);
                } catch (err) {
                    setError(err.message);
                    setLoading(false);
                }
            };
            fetchData();
        }
    }, []);

    const updateUsers = (updatedUsers) => {
        setUsers(updatedUsers);
        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(updatedUsers));
    };

    const handleToggleStatus = (userId, todoId) => {
        const updatedUsers = users.map(user => {
            if (user.id !== userId) return user;
            return {
                ...user,
                todos: user.todos.map(todo => {
                    if (todo.id !== todoId) return todo;
                    return { ...todo, status: !todo.status };
                })
            };
        });
        updateUsers(updatedUsers);
    };

    const filteredUsers = users.map(user => ({
        ...user,
        todos: user.todos.filter(todo =>
            todo.title.toLowerCase().includes(search.toLowerCase())
        )
    }));

    const handleDelete = (userId, todoId) => {
        const updated = users.map(user =>
            user.id === userId
                ? { ...user, todos: user.todos.filter(todo => todo.id !== todoId) }
                : user
        );
        updateUsers(updated);
    };

    const handleEdit = (userId, todoId) => {
        const updatedUsers = [...users];
        const user = updatedUsers.find(u => u.id === userId);
        const todoIndex = user.todos.findIndex(t => t.id === todoId);
        const todo = user.todos[todoIndex];

        const newTitle = prompt('Edit title:', todo.title);
        const newDescription = prompt('Edit description:', todo.description);
        const newPriority = prompt('Edit priority (Low/Medium/High):', todo.priority);
        const newStart = prompt('Edit start date:', todo.start);

        if ([newTitle, newDescription, newPriority, newStart].some(v => v === null)) return;
        if (!['Low', 'Medium', 'High'].includes(newPriority)) {
            alert('Priority must be Low, Medium, or High.');
            return;
        }

        user.todos[todoIndex] = {
            ...todo,
            title: newTitle,
            description: newDescription,
            priority: newPriority,
            start: newStart,
        };
        updateUsers(updatedUsers);
    };

    const handleDragStart = (userId, todoId, currentPriority) => {
        setDraggedItem({ userId, todoId, currentPriority });
    };

    const handleDragOver = (e) => {
        e.preventDefault();
    };

    const handleDrop = (targetPriority) => {
        if (!draggedItem) return;

        const { userId, todoId } = draggedItem;
        const updatedUsers = [...users];
        const user = updatedUsers.find((u) => u.id === userId);
        const todoIndex = user.todos.findIndex((t) => t.id === todoId);

        if (user && user.todos[todoIndex] && user.todos[todoIndex].priority !== targetPriority) {
            user.todos[todoIndex].priority = targetPriority;
            updateUsers(updatedUsers);
        }

        setDraggedItem(null);
    };

    const getPriorityColor = (priority) => {
        switch (priority) {
            case 'High':
                return 'bg-red-500';
            case 'Medium':
                return 'bg-yellow-500';
            case 'Low':
                return 'bg-blue-500';
            default:
                return 'bg-gray-500';
        }
    };

    const renderTasks = (priority) => {
        return filteredUsers.map((user) =>
            user.todos
                .filter((todo) => todo.priority === priority)
                .map((todo) => (
                    <div
                        key={todo.id}
                        className={`relative p-4 rounded shadow mb-4 cursor-grab transition-all duration-300 ${theme === 'light' ? 'bg-white text-slate-800' : 'bg-slate-800 text-white'
                            } ${todo.status ? 'backdrop-blur-sm opacity-70' : ''}`}
                        draggable
                        onDragStart={() => handleDragStart(user.id, todo.id, todo.priority)}
                    >
                        {/* Checkbox */}
                        <input
                            type="checkbox"
                            className="absolute top-2 right-2 w-4 h-4 cursor-pointer"
                            checked={todo.status || false}
                            onChange={() => handleToggleStatus(user.id, todo.id)}
                        />

                        <div className="flex flex-col gap-2">
                            <div
                                className={`${getPriorityColor(todo.priority)} ${theme === 'light' ? 'text-white' : 'text-slate-800'
                                    } w-fit rounded px-2 py-1 text-xs font-medium`}
                            >
                                {todo.priority}
                            </div>

                            <h3
                                className={`text-2xl font-medium ${theme === 'light' ? 'text-gray-900' : 'text-white'
                                    } ${todo.status ? 'line-through' : ''}`}
                            >
                                {todo.title}
                            </h3>

                            <p className={`text-1xl ${theme === 'light' ? 'text-gray-600' : 'text-gray-300'}`}>
                                {todo.description}
                            </p>
                            <div className="w-fit rounded px-2 py-1 text-xs">{todo.start || 'No start date'}</div>
                            <div className="w-fit rounded px-2 py-1 text-xs">{todo.end || 'No end date'}</div>
                            <hr />
                            <div className="rounded px-2 py-1 text-xs">{todo.attachments || 'No attachments'}</div>
                        </div>

                        <div className="flex justify-end gap-3 mt-2">
                            <FaPen
                                className={`text-1xl ${theme === 'light' ? 'text-gray-800' : 'text-white'
                                    } cursor-pointer hover:text-blue-500`}
                                onClick={() => handleEdit(user.id, todo.id)}
                            />
                            <FaTrash
                                className={`text-1xl ${theme === 'light' ? 'text-gray-800' : 'text-white'
                                    } cursor-pointer hover:text-red-500`}
                                onClick={() => handleDelete(user.id, todo.id)}
                            />
                        </div>
                    </div>
                ))
        );
    };

    if (loading) return <div className="loading">Loading data...</div>;
    if (error) return <div className="error">Error: {error}</div>;

    return (
        <>
            <div className="flex justify-between pr-20">
                <input
                    type="text"
                    value={search}
                    onChange={(e) => setSearch(e.target.value)}
                    placeholder="Search tasks..."
                    className={`border p-2 sm:p-3 rounded-md w-full h-[48px] max-w-sm ${theme === 'light'
                        ? 'border-slate-300 bg-[#F5F5F5] text-black'
                        : 'border-slate-600 bg-slate-800 text-white'
                        } hover:border-blue-500 focus:outline-none focus:ring-1 focus:border-blue-500 transition duration-200 ease-in-out`}
                />
                <button
                    onClick={() => setIsOpenModel(true)}
                    className="cursor-pointer p-5 pt-0.5 pb-0.5 bg-[#246083] text-white rounded-2xl font-thin"
                >
                    AddTask..
                </button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 w-full min-h-screen p-6">
                {columns.map((column) => (
                    <div key={column.id} className="flex flex-col">
                        <span
                            className={`h-20 ${theme === 'light' ? 'text-white bg-[#246083]' : 'text-white bg-gray-800'
                                } flex justify-center items-center text-2xl font-bold rounded-xl p-4`}
                        >
                            {column.title}
                        </span>
                        <div
                            className="px-4 py-4 overflow-y-auto rounded-b-xl shadow-inner space-y-4 flex-1"
                            onDragOver={handleDragOver}
                            onDrop={() => handleDrop(column.priority)}
                        >
                            {renderTasks(column.priority)}
                        </div>
                    </div>
                ))}
                {isOpenModel && <Modal setIsOpenModel={setIsOpenModel} />}
            </div>
        </>
    );
};

export default TaskCard;
